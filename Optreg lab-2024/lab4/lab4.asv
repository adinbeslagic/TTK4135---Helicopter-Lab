clear
clc

%% Initialization and model definition
init03; % Change this to the init file corresponding to your helicopter

% Discrete time system model. x = [lambda r p p_dot]'
delta_t	= 0.25; % sampling time
A1 = [1            delta_t           0           0           0        0;
       0            1          -delta_t*K_2         0           0        0;
       0            0           1           delta_t           0        0;
       0            0    -delta_t*K_1*K_pp      1-delta_t*K_1*K_pd       0        0;
       0            0           0           0           1        delta_t;
       0            0           0           0       -delta_t*(K_3*K_ep)  (1-delta_t*K_3*K_ed)];
B1 = [0           0; 
      0           0; 
      0           0; 
      delta_t*K_1*K_pp    0;
      0           0;
      0        delta_t*K_3*K_ep];

% Number of states and inputs
mx = size(A1,2);                                % Number of states (number of columns in A) = 6
mu = size(B1,2);                                % Number of inputs(number of columns in B) = 2

% Initial values
x1_0 = pi;                                      % Lambda
x2_0 = 0;                                       % r
x3_0 = 0;                                       % p
x4_0 = 0;                                       % p_dot
x5_0 = 0;                                       % e
x6_0 = 0;                                       % e_dot
x0 = [x1_0 x2_0 x3_0 x4_0 x5_0 x6_0]';          % Initial values

% Time horizon and initialization
N  = 40;                                        % Time horizon for states
M  = N;                                         % Time horizon for inputs
z  = zeros(N*mx+M*mu,1);                        % Initialize z for the whole horizon
z0 = z;                                         % Initial value for optimization

%% Bounds
ul 	    = -pi/2;                                % Lower bound on control
uu 	    = pi/2;                                 % Upper bound on control

xl      = -Inf*ones(mx,1);                      % Lower bound on states (no bound)
xu      = Inf*ones(mx,1);                       % Upper bound on states (no bound)
xl(3)   = ul;                                   % Lower bound on state x3
xu(3)   = uu;                                   % Upper bound on state x3

% Generate constraints on measurements and inputs
[vlb,vub]       = gen_constraints(N, M, xl, xu, ul, uu); 
vlb(N*mx+M*mu)  = 0;                            % We want the last input to be zero
vub(N*mx+M*mu)  = 0;                            % We want the last input to be zero

% Generate the matrix Q and the vector c (objecitve function weights in the QP problem) 
Q1 = zeros(mx,mx);
Q1(1,1) = 1;                                    % Weight on travel, modify this
Q1(2,2) = 0;                                    % Weight on travel rate
Q1(3,3) = 0;                                    % Weight on pitch modify this one for experiments
Q1(4,4) = 0;                                    % Weight on pitch rate
Q1(5,5) = 0;                                    % Weight on elevation
Q1(6,6) = 0;                                    % Weight on elevation rate
P1 = [1 0; 0 1];                                % Weight on input
G = gen_q(Q1, P1, N, M);                        % Generate G 
c = zeros(size(G,1), 1);                        % Generate c, this is the linear constant term in the QP

%% LQR
Q_lqr = 20*diag([1; 1; 1; 1; 1; 1]);               %Weight on states for LQR
R_lqr = diag([1; ]);                           %Weight on inputs for LQR
[K,S,e] = dlqr(A1,B1,Q_lqr,R_lqr)               %Generate K - gain matrix for feedback

%% Generate system matrixes for linear model
Aeq = gen_aeq(A1, B1, N, mx, mu);               % Generate A,
beq = zeros(size(Aeq, 1), 1);                   % Generate b
beq(1:mx, 1) = A1*x0;

%% Solve QP problem with nonlinear constraint
f = @(x) 1/2*x'*G*x;
nonlcon = @elev_con;
opt = optimoptions('fmincon','Algorithm','sqp','MaxFunEvals',40000);
tic
[z, ~] = fmincon(f, z0, [], [], Aeq, beq, vlb, vub, nonlcon, opt);
toc

% Calculate objective value
phi1 = 0.0;
PhiOut = zeros(N*mx+M*mu,1);
for i=1:N*mx+M*mu
  phi1=phi1+G(i,i)*z(i)*z(i);
  PhiOut(i) = phi1;
end

%% Extract control inputs and states
u1  = [0; z(N*mx+1:2:N*mx+M*mu)];           % Control inputs from solution
u2  = [0; z(N*mx+2:2:N*mx+M*mu)];

x1 = [x0(1);z(1:mx:N*mx)];                  % State x1 from solution
x2 = [x0(2);z(2:mx:N*mx)];                  % State x2 from solution
x3 = [x0(3);z(3:mx:N*mx)];                  % State x3 from solution
x4 = [x0(4);z(4:mx:N*mx)];                  % State x4 from solution
x5 = [x0(5);z(5:mx:N*mx)];                  % State x4 from solution
x6 = [x0(6);z(6:mx:N*mx)];                  % State x4 from solution

num_variables = 5/delta_t;
zero_padding = zeros(num_variables,1);
unit_padding  = ones(num_variables,1);


u1   = [zero_padding; u1; zero_padding];
u2   = [zero_padding; u2; zero_padding];
u    = [u1 u2];
x1   = [pi*unit_padding; x1; zero_padding];
x2   = [zero_padding; x2; zero_padding];
x3   = [zero_padding; x3; zero_padding];
x4   = [zero_padding; x4; zero_padding];
x5   = [zero_padding; x5; zero_padding];
x6   = [zero_padding; x6; zero_padding];

%% Solution for the sim file
t = 0:delta_t:delta_t*(length(u)-1);
u_ts = timeseries(u, t);                    %Solution input
x_ts = timeseries([x1 x2 x3 x4 x5 x6], t);        %Solution states, x5 and x6 missing?

%% Plotting

figure(3)
hold on;
subplot(4,2,1)
stairs(t,u1,'LineWidth', 1.5),grid
ylabel('input pitch', 'FontSize', 14),xlabel('tid (s)', 'FontSize', 14)
subplot(4,2,2)
stairs(t,u2, 'LineWidth',1.5),grid
ylabel('input elevation', 'FontSize', 14),xlabel('tid (s)', 'FontSize', 14)
subplot(4,2,3)
plot(t,x1,'m',t,x1,'mo', 'LineWidth',1.5),grid
ylabel('lambda', 'FontSize', 14),xlabel('tid (s)', 'FontSize', 14)
subplot(4,2,4)
plot(t,x2,'m',t,x2','mo', 'LineWidth',1.5),grid
ylabel('r', 'FontSize', 14),xlabel('tid (s)', 'FontSize', 14)
subplot(4,2,5)
plot(t,x3,'m',t,x3,'mo', 'LineWidth',1.5),grid
ylabel('p', 'FontSize', 14),xlabel('tid (s)', 'FontSize', 14)
subplot(4,2,6)
plot(t,x4,'m',t,x4','mo', 'LineWidth',1.5),grid
xlabel('tid (s)', 'FontSize', 14),ylabel('pdot', 'FontSize', 14)
subplot(4,2,7)
plot(t,x5,'m',t,x5','mo', 'LineWidth',1.5),grid
xlabel('tid (s)', 'FontSize', 14),ylabel('e', 'FontSize', 14)
subplot(4,2,8)
plot(t,x6,'m',t,x6','mo', 'LineWidth',1.5),grid
xlabel('tid (s)', 'FontSize', 14),ylabel('edot', 'FontSize', 14)
hold on;

